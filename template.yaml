AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Example macro you can use to automatically set retention policies on your logs

Globals:
  Function:
    Runtime: nodejs14.x
    Tracing: Active
    Timeout: 10
    Handler: index.handler
    Architectures:
      - arm64
    Layers:
      - !Ref DependencyLayer      

Resources:
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs14.x
    Properties:    
      LayerName: dependencies
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs14.x

  SetLogRetentionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/set-log-retention/
      Environment:
        Variables:
          RETENTION_DAYS: 3
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:            
            Schedule: "cron(0 2 * * ? *)"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - logs:DescribeLogGroups
                - logs:PutRetentionPolicy
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  DeleteUnusedLogGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/delete-unused-log-groups/      
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:            
            Schedule: "rate(7 days)"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - logs:DescribeLogGroups
                - logs:DeleteLogGroup
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
            - Effect: Allow
              Action:
                - lambda:ListFunctions
              Resource: "*"
  